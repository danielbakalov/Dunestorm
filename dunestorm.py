# -*- coding: utf-8 -*-
"""Dunestorm.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SjjWaAJJVjKbA9A87jeUnk0rM0v40Cnj
"""

# Imports
import sys
import random

# Function to display the Main Menu
def mainMenu():
    print(
        "           Main Menu",
        "Select from the following options:",
        "1 - Login & Play",
        "2 - Create/Edit Player",
        "3 - Instructions",
        "4 - High Scores",
        "5 - About Dunestorm",
        "6 - Logout",
        sep = "\n")
    while True:
        inp = input("\nSelect an option: ")
        if inp == "1":
            playMenu()
            break
        elif inp == "2":
            playerMenu()
            break
        elif inp == "3":
            instructionsMenu()
            break
        elif inp == "4":
            showScores(scoreDict)
        elif inp == "5":
            print("\nDunestorm is an adventure game where the user explores a vast Desert in search of a pyramid buried in the sand.")
        elif inp == "6":
            print("\nLogging out.")
            sys.exit()
        else:
            print("\nInvalid input.")

# Function to display the Login & Play Menu
def playMenu():
    print(
        "\n        Login & Play Menu",
        "Select from the following options:",
        "1 - New game",
        "2 - Load saved game",
        "3 - Return to Main Menu",
        sep = "\n")
    while True:
        inp = input("\nSelect an option: ")
        if inp == "1":
            game(login())
            break
        elif inp == "2":
            game(login())
            break
        elif inp == "3":
            print("")
            mainMenu()
            break
        else:
            print("\nInvalid input.")

# Function to display the Create/Edit Player Menu
def playerMenu():
    print(
        "\n     Create/Edit Player Menu",
        "Select from the following options:",
        "1 - Create new player",
        "2 - Edit existing player",
        "3 - Delete existing player",
        "4 - High Scores",
        "5 - Return to Main Menu",
        sep = "\n")
    while True:
        inp = input("\nSelect an option: ")
        if inp == "1":
            registerPlayer()
        elif inp == "2":
            editPlayer()
        elif inp == "3":
            delPlayer()
        elif inp == "4":
            showScores(scoreDict)
        elif inp == "5":
            print("")
            mainMenu()
            break
        else:
            print("\nInvalid input.")

# Function to display the Instructions Menu
def instructionsMenu():
    print(
        "\n       Instructions Menu",
        "Select from the following options:",
        "1 - Background & Story",
        "2 - Basics",
        "3 - How time passes in the game",
        "4 - Return to Main Menu",
        sep = "\n")
    while True:
        inp = input("\nSelect an option: ")
        if inp == "1":
            print(
                "\nThe King of the Desert has been kidnapped. It is your duty to save him. Search the vast Desert in search of 3 magical items that will further your journey.",
                "The first item is located in the Sanctum Oasis. The second is located in the Crumbling Ruins. The third, in the Desert Metropolis.",
                "Discover all of these items and you will find yourself entering The Pyramid. Those who are brave enough to complete this journey will be rewarded with a great sum.",
                sep = "\n")
        elif inp == "2":
            print("\nWhile in game, you can travel, view the map, view your inventory, hunt for food, fill your waterskin, talk to others, or search the area.")
        elif inp == "3":
            print("\nEach space on the map you travel equates to one day passed. Each day, you consume 1/40 of your Waterskin and 2 pieces of Meat.")
        elif inp == "4":
            print("")
            mainMenu()
            break
        else:
            print("\nInvalid input.")

# Function where the actual gameplay occurs
def game(name):
    map = createMap()
    location = [0, 0]
    days = [0]
    inventory = {"Flimsy Bow": 1, "Wooden Arrows": 100, "Waterskin": "40/40", "Meat": 20}
    discovered = ["V"]
    score = [0]
    print(
        "\nWelcome to the land of Dunestorm, where the Great Desert King has been captured, and it is your duty to free him.",
        "It is recommended to talk to others around you to learn more about this quest.",
        sep = "\n")
    while True:
        if int(inventory["Waterskin"][:2]) <= 0:
            print("\nThe drought of the Desert got to you as you die of thirst. Game over. Final score:", score[0])
            if scoreDict[name] < score[0]:
                scoreDict[name] = score[0]
            print("")
            mainMenu()
            break
        elif inventory["Meat"] <= 0:
            print("\nYou run out of food and starve to death on your travels. Game over. Final score:", score[0])
            if scoreDict[name] < score[0]:
                scoreDict[name] = score[0]
            print("")
            mainMenu()
            break
        gameMenu(map, location, days, inventory, score)
        if checkLocation(map, location) == "O" and "O" not in discovered:
            discovered.append("O")
            score[0] += 100
            sandstorm(name, map, location, inventory, score)
            print("\nYour journey takes you to the beutifal Sanctum Oasis, located at 9, 0. It seems like a miracle as water surges through an opening in the deep Desert sand.")
        elif checkLocation(map, location) == "R" and "R" not in discovered:
            discovered.append("R")
            score[0] += 100
            sandstorm(name, map, location, inventory, score)
            print("\nYou find yourself entering the ominous Crumbling Ruins, located at 9, 9. Fog sways across the sky, covering the mysterious structure.")
        elif checkLocation(map, location) == "M" and "M" not in discovered:
            discovered.append("M")
            score[0] += 100
            sandstorm(name, map, location, inventory, score)
            print("\nWelcome to the Desert Metropolis! Location: 0, 9. The mighty city is a vessel of life booming with tourists, as skyscrapers pierce the clouds above.")
        elif checkLocation(map, location) == "P" and "P" not in discovered:
            discovered.append("P")
            score[0] += 100
            pyramid(name, inventory, score)

# Function to display the In-Game Menu
def gameMenu(map, location, days, inventory, score):
    print(
        "\n        In-Game Menu",
        "Select from the following options:",
        "1 - Travel",
        "2 - View Map",
        "3 - View Inventory",
        "4 - Hunt",
        "5 - Fill Waterskin",
        "6 - Talk to People",
        "7 - Search the Area",
        "8 - Save game and return to Main Menu",
        sep = "\n")
    while True:
        inp = input("\nSelect an option: ")
        if inp == "1":
            travelMenu(map, location, days, inventory, score)
            break
        elif inp == "2":
            print("")
            showMap(map)
            break
        elif inp == "3":
            print("")
            for item in inventory:
                print(item, "-", inventory[item])
            break
        elif inp == "4":
            hunt(map, location, inventory, score)
            break
        elif inp == "5":
            fillWater(map, location, inventory, score)
            break
        elif inp == "6":
            talk(map, location)
            break
        elif inp == "7":
            search(map, location, days, inventory, score)
            break
        elif inp == "8":
            print("")
            mainMenu()
            break
        else:
            print("\nInvalid input.")

# Function to display the menu to travel
def travelMenu(map, location, days, inventory, score):
    print("\nWhich direction do you want to travel?")
    print(
        "",
        "N - North",
        "E - East",
        "S - South",
        "W - West",
        sep = "\n")
    while True:
        inp = input("\nSelect an option: ")
        direction = inp.upper()
        if direction == "N":
            direction = "North"
            if location[1] == 9:
                print("\nYou cannot travel any further North.")
                continue
            else:
                while True:
                    inp = input("\nEnter the amount of spaces you want to travel: ")
                    spaces = int(inp)
                    if location[1] + spaces <= 9:
                        prev = [location[0], location[1]]
                        location[1] = location[1] + spaces
                        travel(map, location, prev, direction, spaces, days, inventory, score)
                        break
                    else:
                        print("\nYou cannot travel that far, try again.")
                break
        elif direction == "E":
            direction = "East"
            if location[0] == 9:
                print("\nYou cannot travel any further East.")
                continue
            else:
                while True:
                    inp = input("\nEnter the amount of spaces you want to travel: ")
                    spaces = int(inp)
                    if location[0] + spaces <= 9:
                        prev = [location[0], location[1]]
                        location[0] = location[0] + spaces
                        travel(map, location, prev, direction, spaces, days, inventory, score)
                        break
                    else:
                        print("\nYou cannot travel that far, try again.")
                break
        elif direction == "S":
            direction = "South"
            if location[1] == 0:
                print("\nYou cannot travel any further South.")
                continue
            else:
                while True:
                    inp = input("\nEnter the amount of spaces you want to travel: ")
                    spaces = int(inp)
                    if location[1] - spaces >= 0:
                        prev = [location[0], location[1]]
                        location[1] = location[1] - spaces
                        travel(map, location, prev, direction, spaces, days, inventory, score)
                        break
                    else:
                        print("\nYou cannot travel that far, try again.")
                break
        elif direction == "W":
            direction = "West"
            if location[0] == 0:
                print("\nYou cannot travel any further West.")
                continue
            else:
                while True:
                    inp = input("\nEnter the amount of spaces you want to travel: ")
                    spaces = int(inp)
                    if location[0] - spaces >= 0:
                        prev = [location[0], location[1]]
                        location[0] = location[0] - spaces
                        travel(map, location, prev, direction, spaces, days, inventory, score)
                        break
                    else:
                        print("\nYou cannot travel that far, try again.")
                break
        else:
            print("\nInvalid input.")

# Function to travel
def travel(map, location, prev, direction, spaces, days, inventory, score):
    days[0] += spaces
    inventory["Waterskin"] = str(int(inventory["Waterskin"][:2]) - spaces) + "/40"
    inventory["Meat"] -= 2 * spaces
    score[0] += spaces * 5
    print("\nYou travel ", spaces, " spaces ", direction, " and use up ", spaces, "/40 of your Waterskin and ", 2 * spaces, " pieces of Meat. It has now been ", days[0], " days since you've started your journey. [-", spaces, "/40 Waterskin][-", 2 * spaces, " Meat]", sep = "")
    if checkLocation(map, prev) == "P":
        addLocation(map, 4, 4, "P")
        addLocation(map, 4, 5, "P")
        addLocation(map, 5, 4, "P")
        addLocation(map, 5, 5, "P")
    elif checkLocation(map, location) == "P":
        addLocation(map, 4, 4, "P")
        addLocation(map, 4, 5, "P")
        addLocation(map, 5, 4, "P")
        addLocation(map, 5, 5, "P")
        addLocation(map, prev[0], prev[1], checkLocation(map, prev))
    else:
        addLocation(map, prev[0], prev[1], checkLocation(map, prev))
    addLocation(map, location[0], location[1], "X")

# Function to hunt
def hunt(map, location, inventory, score):
    if checkLocation(map, location) == " ":
        if "Endless Musket" in inventory:
            print("\nUsing the power of your Endless Musket, you are able to keep hunting until you catch a large mule deer! [+50 Meat]")
            inventory["Meat"] += 50
            score[0] += 10
        elif inventory["Wooden Arrows"] >= 10:
            messages = ["\nYou couldn't catch any prey this time. [-10 Wooden Arrows]", "\nAfter a long search for food you are rewarded with a small hare. [-10 Wooden Arrows][+5 Meat]", "\nYour hunt was succesful as you found a large mule deer! [-10 Wooden Arrows][+50 Meat]"]
            inventory["Wooden Arrows"] -= 10
            num = random.randint(0, 100)
            if num <= 30:
                print(messages[0])
            elif num <= 80:
                print(messages[1])
                inventory["Meat"] += 5
                score[0] += 5
            else:
                print(messages[2])
                inventory["Meat"] += 50
                score[0] += 10
        else:
            print("\nYou don't have enough ammunition to hunt. Return to the Village to get more Wooden Arrows.")
    else:
        print("\nYou are unable to hunt here. Please enter the Wilderness to hunt.")

# Function to fill the waterskin
def fillWater(map, location, inventory, score):
    if checkLocation(map, location) == "O":
        if inventory["Waterskin"] == "40/40":
            print("\nYour Waterskin is already full. Come back again when your short on water.")
        else:
            waterGained = 40 - int(inventory["Waterskin"][:2])
            inventory["Waterskin"] = "40/40"
            score[0] += waterGained
            print("\nYour Waterskin is filled by the calm water of the Oasis. [+", waterGained, "/40 Waterskin]", sep = "")
    else:
        print("\nThe dryness of the Desert stops you from filling your Waterskin. Enter the Oasis to find a bountiful supply of water.")

# Function to talk to nearby characters
def talk(map, location):
    if checkLocation(map, location) == "V":
        print(
            "",
            "An elderely man tells you about the kidnapped Desert king and what is needed to free him.",
            "He tells you to enter the deep dunes of the Desert and find three key items.",
            "He warns you to not attempt to enter the Desert Pyramid, located in the center, without all three items.",
            "He recommends to first head East, where the only nearby supply of water is located.",
            "He also tells you to be ware of sandstorms, which can be dangerous if you are unprepared.",
            "He finishes off by telling you to come back to this village every four days, where he will give you some Wooden Arrows.",
            "Farewell, he says, and good luck.",
            sep = "\n")
    elif checkLocation(map, location) == "O":
        print(
            "",
            "Two travelers bump into you who tell you they are in search of the Golden Shovel.",
            "They state it is somewhere around here but can't find it, and it can be used to dig into the Desert Temple, where the Desert king is located",
            "Lastly, they tell you to use this oasis as a hub for filling your waterskin to prevent yourself from dying of thirst.",
            sep = "\n")
    elif checkLocation(map, location) == "R":
        print(
            "",
            "A dusty man who appears to be homeless shouts in your direction. Hey! Finally someone else comes 'round here!",
            "He tells you this mysterious old area is where he calls home, but no one ever comes to see him.",
            "Before leaving you, he mentions a magical pair of goggles that can see through any surface.",
            "He mutters that they would be useful for this fog.",
            sep = "\n")
    elif checkLocation(map, location) == "M":
        print(
            "",
            "While walking through the bustling city, a little boy tells you about his dreams to become a Dunefighter.",
            "However, he says he doesn't have any weapons, and has been searching for what he calls the Endless Musket for the last week.",
            "He says it might be somewhere in the city but keeps failing at finding it!",
            sep = "\n")
    elif checkLocation(map, location) == " ":
        print("\nThere is no one nearby to talk to at this time. No one else is willing to enter the dangerous Desert sands like yourself.")

# Function to search the area
def search(map, location, days, inventory, score):
    if checkLocation(map, location) == "V":
        if days[0] % 4 == 0:
            print("\nThe old man kept his promise. [+40 Wooden Arrows]")
            inventory["Wooden Arrows"] += 40
            score[0] += 25
        else:
            print("\nYou search the village but don't manage to find anything. Come back every fourth day to recieve some Wooden Arrows.")
    elif checkLocation(map, location) == "O":
        print("\nYou search around the Sanctum Oasis, but with no success, you decide to dive into the water. You discover a golden chest containing a majical shovel. [+1 Golden Shovel]")
        inventory["Golden Shovel"] = 1
        score[0] += 250
    elif checkLocation(map, location) == "R":
        print("\nRemembering what the hobo said, you climb up the ruins to discover a pair of magical goggles. [+1 Spirit Goggles]")
        inventory["Spirit Goggles"] = 1
        score[0] += 250
    elif checkLocation(map, location) == "M":
        print("\nYour search through the massive city leads you to an old gun shop, where a particular weapon catches your eye. You manage to steal it before running off. [+1 Endless Musket]")
        inventory["Endless Musket"] = 1
        score[0] += 250
    elif checkLocation(map, location) == " ":
        print("\nYou try to search the area but only manage to find a pile of sand.")

# Function to start a sandstorm
def sandstorm(name, map, location, inventory, score):
    print("\nRight as you go to explore this new location, winds pick up greatly, summoning tens of Desert creatures. You must defeat these enemies and clear the sandstorm before you can proceed.")
    if "Endless Musket" in inventory:
        print("\nUsing the power of your Endless Musket, you breeze through the sandstorm without an issue.")
        score[0] += 100
    else:
        count = 0
        while True:
            if random.randint(0, 100) <= 10:
                inventory["Wooden Arrows"] -= count
                print("\nAfter a long struggle, you manage to clear the sandstorm, revealing the new location. [-", count, " Wooden Arrows]", sep = "")
                score[0] += 100
                break
            else:
                count += 5
                if inventory["Wooden Arrows"] - count <= 0:
                    print("\nThe sandstorm enemies get to you as you die a fighting man. Game over. Final score:", score[0])
                    if scoreDict[name] < score[0]:
                        scoreDict[name] = score[0]
                    print("")
                    mainMenu()
                    break

# Function for the event of the user discovering the pyramid
def pyramid(name, inventory, score):
    print(
        "\nAs you near the center of the Desert, an intense sandstorm stirs up. But this is not a normal sandstorm, this one is far stronger with deadlier enemies.",
        "\nEven if you get through the sandstorm, a great fog clouds the area, making it impossible to see where the Pyramid is.",
        "\nTo top it all off, the Pyramid is burried underground, making it impossible to get too.",
        sep = "\n")
    if "Golden Shovel" in inventory and "Spirit Goggles" in inventory and "Endless Musket" in inventory:
        score[0] += 750
        print(
            "\nUsing the power of the Endless Musket, you breeze through the intense sandstorm.",
            "\nThen, with your Spirit Goggles you are able to locate the Pyramid.",
            "\nFinally, you use the Golden Shovel to dig into the chambers of the Pyramid.",
            "\nYou locate the lost Desert king! Congratulations, you beat the game.",
            "\nFinal score:", score[0])
        print("")
        mainMenu()
    elif "Endless Musket" not in inventory:
        print("\nWith only your Flimsy Bow, you struggle to fend off the enemies from the sandstorm and end up dying. Game over. Final score:", score[0])
        if scoreDict[name] < score[0]:
                scoreDict[name] = score[0]
        print("")
        mainMenu()
    elif "Spirit Goggles" not in inventory:
        print(
            "\nUsing the power of the Endless Musket, you breeze through the intense sandstorm.",
            "\nHowever, your search for the Pyramid is a failure as you take too long looking, and end up dying of starvation. Game over. Final score:", score[0])
        if scoreDict[name] < score[0]:
                scoreDict[name] = score[0]
        print("")
        mainMenu()
    elif "Golden Shovel" not in inventory:
        print(
            "\nUsing the power of the Endless Musket, you breeze through the intense sandstorm.",
            "\nThen, with your Spirit Goggles you are able to locate the Pyramid.",
            "\nHowever, you try to dig down to the pyramid with your bare hands, and develop a serious hand injury, causing you to die. Game over. Final score:", score[0])
        if scoreDict[name] < score[0]:
                scoreDict[name] = score[0]
        print("")
        mainMenu()

# Function to login the user
def login():
    while True:
        username = input("\nEnter your username: ")
        if username in userDict:
            count = 1
            while True:
                password = input("\nEnter your password: ")
                if userDict[username][0] == password:
                    userDict[username][4] = True
                    print("\nGreat! You're all logged in.")
                    return username
                elif count < 3:
                    print("\nWrong password, try again.")
                    count+=1
                else:
                    print("\nPassword attempted too many times. You are now locked out.")
                    sys.exit()
            break
        else:
            print("\nThis username has not been registered, please enter a new one.")

# Function to register a new user
def registerPlayer():
    print("\nPlease enter your age before proceeding.")
    while True:
        age = input("\nEnter your age: ")
        try:
            age = int(age)
        except:
            print("\nInvalid age, try again.")
            continue
        else:
            if age >= 14:
                print("\nWelcome to Dunestorm! Let’s get you registered!")
                while True:
                    username = input("\nEnter your username: ")
                    if len(username) >= 5 and len(username) <= 10:
                        if username in userDict:
                            print("\nThis username exists, please choose another.")
                        else:
                            while True:
                                firstName = input("\nPlease enter your first name: ")
                                lastName = input("\nPlease enter your last name: ")
                                if firstName.isalpha() and (("-" in lastName and (lastName[:lastName.index("-")] + lastName[lastName.index("-") + 1:]).isalpha()) or lastName.isalpha()):
                                    print("\nPlease enter your password. It must have at least one capital letter, number, and special character. It may not contain repeat characters.")
                                    while True:
                                        password = input("\nEnter your password: ")
                                        if len(password) >= 8:
                                            capital = False
                                            number = False
                                            special = False
                                            repeat = False
                                            for i in password:
                                                if i.isupper():
                                                    capital = True
                                                elif i.isnumeric():
                                                    number = True
                                                elif i in "!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~":
                                                    special = True
                                                for x in range(password.index(i) + 1, len(password)):
                                                    if i == password[x]:
                                                        repeat = True
                                            if capital and number and special and not repeat:
                                                userDict[username] = [password, lastName.title(), firstName.title(), age, False]
                                                print("\nGreat! You're all set.")
                                                playerMenu()
                                                break
                                            else:
                                                print("\nInvalid password, try again.")
                                        else:
                                            print("\nInvalid password, it must be at least 8 characters long. Try again.")
                                    break
                                else:
                                    print("\nInvalid name, please try again.")
                            break
                    else:
                        print("\nInvalid username, it must be between 5 and 10 characters. Please enter a new one.")
            else:
                print("\nSorry! You must be at least 14 years old to play.")
                sys.exit()
            break

# Function to edit an existing user
def editPlayer():
    print("\nWhich account would you like to edit?")
    while True:
        username = input("\nEnter your username: ")
        if username in userDict:
            while True:
                print(
                    "\nWhat would you like to edit?",
                    "1 - Username",
                    "2 - Password",
                    "3 - Last Name",
                    "4 - First Name",
                    "5 - Age",
                    "6 - Return to Create/Edit Player Menu",
                    sep = "\n")
                inp = input("\nSelect an option: ")
                if inp == "1":
                    newUsername = input("\nEnter your new username: ")
                    if len(newUsername) >= 5 and len(newUsername) <= 10:
                        userDict[newUsername] = userDict.pop(username)
                        print("\nUsername changed.")
                        break
                    else:
                        print("\nInvalid username.")
                elif inp == "2":
                    password = input("\nEnter your new password: ")
                    if len(password) >= 8:
                        capital = False
                        number = False
                        special = False
                        repeat = False
                        for i in password:
                            if i.isupper():
                                capital = True
                            elif i.isnumeric():
                                number = True
                            elif i in "!\"#$%&'()*+,-./:;<=>?@[\]^_`{|}~":
                                special = True
                            for x in range(password.index(i) + 1, len(password)):
                                if i == password[x]:
                                    repeat = True
                        if capital and number and special and not repeat:
                            userDict[username][0] = password
                            print("\nPassword changed.")
                            break
                        else:
                            print("\nInvalid password.")
                    else:
                        print("\nInvalid password.")
                elif inp == "3":
                    lastName = input("\nEnter your new last name: ")
                    if ("-" in lastName and (lastName[:lastName.index("-")] + lastName[lastName.index("-") + 1:]).isalpha()) or lastName.isalpha():
                        userDict[username][1] = lastName.title()
                        print("\nLast name changed.")
                        break
                    else:
                        print("\nInvalid name.")
                elif inp == "4":
                    firstName = input("\nEnter your new first name: ")
                    if firstName.isalpha():
                        userDict[username][2] = firstName.title()
                        print("\nFirst name changed.")
                        break
                    else:
                        print("\nInvalid name.")
                elif inp == "5":
                    age = input("\nEnter your new age: ")
                    try:
                        age = int(age)
                    except:
                        print("\nInvalid age.")
                        continue
                    else:
                        if age >= 14:
                            userDict[username][3] = age
                            print("\nAge changed.")
                            break
                        else:
                            print("\nSorry! You must be at least 14 years old to play.")
                            sys.exit()
                elif inp == "6":
                    playerMenu()
                    break
                else:
                    print("\nInvalid input.")
            break
        else:
            print("\nThis is not a registered username, please enter a new one.")
    playerMenu()

# Function to delete an existing user
def delPlayer():
    print("\nWhich account would you like to delete? Type return to go back.")
    while True:
        username = input("\nEnter the username of the account you want to delete: ")
        if username.lower() == "return":
            playerMenu()
            break
        elif username in userDict:
            while True:
                inp = input("\nAre you sure you want to delete that account: ")
                if inp.lower() == "yes":
                    del userDict[username]
                    print("\nAccount deleted.")
                    playerMenu()
                    break
                elif inp.lower() == "no":
                    print("\nYour account will not be deleted.")
                    playerMenu()
                    break
                else:
                    print("\nInvalid input, enter yes or no.")
            break
        else:
            print("\nThis is not a registered username, please enter a new one.")


# Dictionary to store user information
userDict = {"dannybak7": ["Qwerty1!", "Bak", "Dan", 89, False], "theuser77": ["Paswo6^", "Barney", "Scott", 14, False], "littletim99": ["Mnblkjo$2", "Tooon", "Tim", 21, False]}

# Dictionary to store scores
scoreDict = {"dannybak7": 1000, "theuser77": 500, "littletim99": 2}

# Function to display the top five high scores
def showScores(scores):
    tempScores = dict(scores)
    topScores = []
    count = 0
    while count < 5:
        highestName = ""
        highestScore = 0
        for name in tempScores:
            try:
                if tempScores[name] >= highestScore:
                    highestName = name
                    highestScore = tempScores[name]
            except:
                pass
        topScores.append(highestName + ": " + str(highestScore))
        try:
            del tempScores[highestName]
        except:
            pass
        count += 1
    print("\nTop 5 Scores:")
    for score in topScores:
        print(score)

# Function to add a location to the map
def addLocation(map, x, y, symbol):
    x = str(x)
    y = str(y)
    xIndex = map[0].index(x)
    yIndex = -1
    for i in range(1, len(map) - 1):
        try:
            temp = map[i].index(y)
        except:
            continue
        else:
            yIndex = i
            break
    temp = map[yIndex]
    newLine = temp[:xIndex] + symbol + temp[xIndex + 1:]
    try:
        map[yIndex] = newLine
    except:
        pass

# Function to check if a coordinate is one of the in-game locations
def checkLocation(map, location):
    if location == [0, 0]:
        return "V"
    elif location == [9, 0]:
        return "O"
    elif location == [9, 9]:
        return "R"
    elif location == [0, 9]:
        return "M"
    elif location in [[4, 4], [4, 5], [5, 4], [5, 5]]:
        return "P"
    else:
        return " "

# Function to create the map
def createMap():
    map = []
    map.append("    0   1   2   3   4   5   6   7   8   9    ")
    for i in range (9, -1, -1):
        map.append("  +---+---+---+---+---+---+---+---+---+---+  ")
        map.append(str(i) + " |   |   |   |   |   |   |   |   |   |   | " + str(i))
    map.append("  +---+---+---+---+---+---+---+---+---+---+  ")
    map.append("    0   1   2   3   4   5   6   7   8   9    ")
    addLocation(map, 0, 0, "X")
    addLocation(map, 9, 0, "?")
    addLocation(map, 9, 9, "?")
    addLocation(map, 0, 9, "?")
    addLocation(map, 4, 4, "?")
    addLocation(map, 4, 5, "?")
    addLocation(map, 5, 4, "?")
    addLocation(map, 5, 5, "?")
    return map

# Function to display the map
def showMap(map):
    for line in map:
        print(line)

# Main method
mainMenu()